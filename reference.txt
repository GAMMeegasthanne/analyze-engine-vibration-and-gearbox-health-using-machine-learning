import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from joblib import dump
import pandas as pd

# Load the good and bad datasets from Excel
good_data = pd.read_excel('/content/drive/MyDrive/gear box/gear box/good/good datacccc.xlsx')
bad_data = pd.read_excel('/content/drive/MyDrive/gear box/gear box/bad/bad datacc.xlsx')

# Assign labels to the datasets
good_data['Label'] = 'good'
bad_data['Label'] = 'bad'

# Combine the datasets
combined_data = pd.concat([good_data, bad_data], ignore_index=True)


# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(combined_data[['Time(s)', 'Magnitude']], combined_data['Label'], test_size=0.2, random_state=42)


# Remove samples with missing values
X_train = pd.DataFrame(X_train).dropna()
y_train = y_train[X_train.index]


# Create an imputer and fit_transform the data
imputer = SimpleImputer(strategy='mean')  # You can choose a different strategy if needed
X_train = imputer.fit_transform(X_train)

# Train the Random Forest classifier
clf = RandomForestClassifier(n_estimators=100, random_state=42)
clf.fit(X_train, y_train)

# Save the trained model
model_file = 'trained_model.joblib'
dump(clf, model_file)
print(f"Trained model saved to {model_file}")

# Predict on new values
def predict_label(time, magnitude):
    new_data = {'Time(s)': [time], 'Magnitude': [magnitude]}
    df_new = pd.DataFrame(new_data)
    prediction = clf.predict(df_new)
    return prediction[0]


# Example usage
new_time = 11
new_magnitude = 900.0
prediction = predict_label(new_time, new_magnitude)
print(f"The label for {new_time} seconds and {new_magnitude} magnitude is: {prediction}")